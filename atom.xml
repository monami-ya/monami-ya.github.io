<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[合同会社もなみ屋]]></title>
  <link href="http://www.monami-ya.jp/atom.xml" rel="self"/>
  <link href="http://www.monami-ya.jp/"/>
  <updated>2016-12-14T16:05:50+09:00</updated>
  <id>http://www.monami-ya.jp/</id>
  <author>
    <name><![CDATA[Monami-ya LLC, Japan.]]></name>
    <email><![CDATA[inquiry@helpdesk.monami-ya.jp]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[IoT アプリケーション構築用クラウド開発環境 (Node-RED) のホスティングサービスを開始いたしました]]></title>
    <link href="http://www.monami-ya.jp/blog/2016/12/09/pizzafactory-camerieri-now-on-sale/"/>
    <updated>2016-12-09T17:00:00+09:00</updated>
    <id>http://www.monami-ya.jp/blog/2016/12/09/pizzafactory-camerieri-now-on-sale</id>
    <content type="html"><![CDATA[<p>IoT アプリケーション構築用クラウド開発環境 PizzaFactory/Camerieri (Camerieri) の提供を開始いたしました。
Camerieri は，IoT アプリケーション構築用クラウド開発環境である Node-RED をクラウドホスティングする SaaS です。</p>

<p>東日本地区に置かれた 24hours x 7days 稼働のコンテナインスタンスを，30日間 2,500 円からで提供いたします。
詳細につきましては，<a href="http://www.monami-ya.jp/solution/pizzafactory/camerieri/">ソリューション紹介のページ</a> をご参照ください。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[サポートサービスのSLA更新について]]></title>
    <link href="http://www.monami-ya.jp/blog/2016/12/08/update-sla/"/>
    <updated>2016-12-08T13:00:00+09:00</updated>
    <id>http://www.monami-ya.jp/blog/2016/12/08/update-sla</id>
    <content type="html"><![CDATA[<p>各サポートサービスの SLA において，有効期限を 90 日から 30 日に短縮いたしました。</p>

<p>本 SLA は，2016年12月8日午前0時以降に次回SLA更新までの期間に，各サポートサービスにお問い合わせ頂き契約したお客様に対し適用されます。
2016年12月8日午前0時よりも前にお問い合わせ頂いているお客様は，適用するLSAを以前のものまたは現在のもの，いずれかを契約時にご選択いただけます。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[クラウドIDE SaaS - PizzaFactory Camino の提供開始]]></title>
    <link href="http://www.monami-ya.jp/blog/2016/12/06/pizzafactory-camino-now-avaliable/"/>
    <updated>2016-12-06T14:27:35+09:00</updated>
    <id>http://www.monami-ya.jp/blog/2016/12/06/pizzafactory-camino-now-avaliable</id>
    <content type="html"><![CDATA[<p>クラウドIDE を提供する SaaS ，<code>PizzaFactory Camino</code> の提供を開始いたしました。
詳細につきましては，<a href="http://www.monami-ya.jp/solution/pizzafactory/camino/">ソリューション製品紹介のページ</a>を御覧ください。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A-RTEGEN のサポートサービスを開始いたしました]]></title>
    <link href="http://www.monami-ya.jp/blog/2016/12/05/a-rtegen-support-now-on-sale/"/>
    <updated>2016-12-05T13:45:00+09:00</updated>
    <id>http://www.monami-ya.jp/blog/2016/12/05/a-rtegen-support-now-on-sale</id>
    <content type="html"><![CDATA[<p>TOPPERS/A-RTEGEN の<a href="http://www.monami-ya.jp/service/a-rtegen">活用サポートサービス</a>を開始いたしました。</p>

<p>本サポートサービスには，AUTOSAR 仕様の知財権運用規定に基づく制限事項がございます。
ご利用の前に，<a href="http://www.monami-ya.jp/service/a-rtegen/sla">SLA</a>を必ずご一読ください。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[GPS Finder のプロプライエタリ・ライセンスを販売開始いたしました]]></title>
    <link href="http://www.monami-ya.jp/blog/2016/12/04/gpsfinder-proprietary-license-on-sale/"/>
    <updated>2016-12-04T11:00:00+09:00</updated>
    <id>http://www.monami-ya.jp/blog/2016/12/04/gpsfinder-proprietary-license-on-sale</id>
    <content type="html"><![CDATA[<p>Android アプリケーション GPS Finder のプロプライエタリ・ライセンスの販売を開始いたしました。
これに伴い，関連する情報を更新いたしました。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A-Workflow を製品紹介に加えました]]></title>
    <link href="http://www.monami-ya.jp/blog/2016/12/03/hello-a-workflow/"/>
    <updated>2016-12-03T11:00:00+09:00</updated>
    <id>http://www.monami-ya.jp/blog/2016/12/03/hello-a-workflow</id>
    <content type="html"><![CDATA[<p>モデルベース開発を支援するための MWE2 コンポーネント群である <a href="http://www.monami-ya.jp/product/a-workflow/">A-Workflow</a> を製品紹介に加えました。
2016年12月中に出荷を開始する予定です。ご期待ください。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Twitter アカウント @MonamiYaShop を閉鎖いたしました]]></title>
    <link href="http://www.monami-ya.jp/blog/2016/12/01/one-twitter-account-was-closed/"/>
    <updated>2016-12-01T09:00:00+09:00</updated>
    <id>http://www.monami-ya.jp/blog/2016/12/01/one-twitter-account-was-closed</id>
    <content type="html"><![CDATA[<p>弊社オンラインショップのリニューアル準備に伴い，Twitter アカウント @MonamiYaShop を閉鎖いたしました。
amazon.co.jp マーケットプレイスでおｎ弊社製品販売は継続しております。
引き続きのご愛顧を賜りますようお願い申し上げます。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Pure Java と MWE2 - メトリクスによる比較]]></title>
    <link href="http://www.monami-ya.jp/blog/2016/11/02/metrics-comparment-between-pure-java-and-mwe2/"/>
    <updated>2016-11-02T22:39:49+09:00</updated>
    <id>http://www.monami-ya.jp/blog/2016/11/02/metrics-comparment-between-pure-java-and-mwe2</id>
    <content type="html"><![CDATA[<h2 id="abstract">Abstract</h2>

<p><a href="http://www.monami-ya.jp/blog/2016/10/31/the-reason-why-you-should-use-workflow-engine-instead-of-java/">先日のホワイトペーパー</a>では，モデルワークフローを Pure Java で記述せずに DSL を使うことで得られるメリットを，具体的な実装を基に示しました。</p>

<p>しかし，「設計思想としては優れているものの，採用のコストに見合う効果が得られない」そんなフーレムワークも，ソフトウェアの世界では，しばしば見られるものです。</p>

<p>本稿は，そのような疑念を払拭するために執筆されました。
実存する Pure Java のモデル変換エンジンを題材に，部分的な MWE2 対応実装に対しメトリクス計測を行い，その結果を示します。</p>

<h2 id="section">評価対象</h2>

<p>先日のホワイトペーパーで例示した A-RTEGEN を利用します。</p>

<p>A-RTEGEN の全てを MWE2 に対応するのは不可能ではありませんが，それなりの工数がかかります。
そこで今回は，CONTRACT フェーズのワークフローに相当する部分のみを MWE2 相当に修正して比較します。</p>

<p>また，TOPPERSプロジェクトから配布されている A-RTEGEN はビルドシステムのサポートが貧弱でメトリクスを取りづらかったため，PizzaFactory プロジェクトが拡張した版をベースとしています。
この方針により，ソースコード行数など数値の厳密さは犠牲になっています。</p>

<p>A-RTEGEN は，モデルから自動生成されたソースコードを含み，ソースコード全体における割合も小さくありません。
そこで，評価対象は全体ではなく，今回の修正で大きな影響を受けた3つの plugin bundle のみとします。</p>

<p>以上のことからから，本稿が掲げる全ての数値は，相対的なもの，または傾向を示すものと捉えてください。</p>

<p>本稿のための MWE2 対応に要した工数は，1人で3.5時間です。
さらに時間をかければ，さらに MWE2 にとって有利な(つまりMWE2を採用した顧客が得られるメリットが高い)数値を引き出せます。
しかし，過度にチューニングしすぎた数値を提示しても現実と乖離してしまいますので，本稿では，敢えて時間に制約をかけました。</p>

<h2 id="section-1">循環的複雑度</h2>

<p>まず，ソフトウェアの保守性を示す指標である <strong>循環的複雑度</strong> を比較します。</p>

<p>循環的複雑度は，可読性や改変のしやすさといったプログラマの生産性に関わる情報を示すだけでなく，”全網羅するために最低限必要なテストケースの数”という品質活動に必要な情報を示します。</p>

<p>テストケースの爆発は，ランタイム側で既に起きています。
ランタイム側のテスト工数抑制を抑えるには，ツールに対する品質活動が欠かせません。
この流れに伴って，ツール側のテスト工数も増大の傾向にあります。
ツールの循環的複雑度の低減は，プロセス全体のテスト工数低減のために欠かせない課題です。</p>

<p>それぞれの plugin bundle における，総合・関数平均・クラス平均・ファイル平均の数値を比較すると，次のようになります。</p>

<p>Complexity : jp.ac.nagoya_u.is.nces.a_are.app</p>

<table>
  <thead>
    <tr>
      <th> </th>
      <th>Total</th>
      <th>Function</th>
      <th>Class</th>
      <th>File</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>Pure Java</td>
      <td>124</td>
      <td>3.4</td>
      <td>9.5</td>
      <td>10.3</td>
    </tr>
    <tr>
      <td>MWE2</td>
      <td>90</td>
      <td>2.6</td>
      <td>8.2</td>
      <td>7.5</td>
    </tr>
  </tbody>
</table>

<p>Complexity : jp.ac.nagoya_u.is.nces.a_are.codegen</p>

<table>
  <thead>
    <tr>
      <th> </th>
      <th>Total</th>
      <th>Function</th>
      <th>Class</th>
      <th>File</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>Pure Java</td>
      <td>93</td>
      <td>1.8</td>
      <td>8.5</td>
      <td>8.5</td>
    </tr>
    <tr>
      <td>MWE2</td>
      <td>91</td>
      <td>1.8</td>
      <td>8.3</td>
      <td>8.3</td>
    </tr>
  </tbody>
</table>

<p>Complexity : jp.ac.nagoya_u.is.nces.a_are.validation</p>

<table>
  <thead>
    <tr>
      <th> </th>
      <th>Total</th>
      <th>Function</th>
      <th>Class</th>
      <th>File</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>Pure Java</td>
      <td>55</td>
      <td>1.5</td>
      <td>7.9</td>
      <td>7.9</td>
    </tr>
    <tr>
      <td>MWE2</td>
      <td>49</td>
      <td>1.7</td>
      <td>7.0</td>
      <td>7.0</td>
    </tr>
  </tbody>
</table>

<p>MWE2 を用いた場合には，Pure Java に比べて循環的複雑度が低下する傾向が見られ，平均すると概ね 10% 弱程度の改善が見られます。</p>

<p>A-RTEGEN は，その背景にある AUTOSAR 仕様全体から見ると，RTE/Os/Schm という大事なソフトウェア部品を生成するツールであるものの，ツールという観点で見ると，他のランタイムコンポーネントのジェネレータに比べて格段に難しいことをしているというわけではありません。
つまりテストに要するコストは，MWE2 を使ったか Pure Java で組んだかによって，少なくとも 10% 程度の差がでます。</p>

<p>ここで，思い出してください。本稿の調査は，もともとは MWE2 を想定していなかったコードを 1人が 3.5 時間だけかけ，最低限の修正をかけたものに基づいています。
当初から MWE2 の存在を想定したコンポーネント設計を行っていた場合には，10% 弱の改善は，さらに良いスコアになります。</p>

<p>また，CONTRACT と GENERATE という2つのフェーズのうち，CONTRACT のみ修正していることにもご留意ください。
全てを修正することで，10% 弱の改善に，2倍前後のレバレッジがかかることになります。</p>

<p>AUTOSAR のランタイムコンポーネントを全て揃えるためには，20億円以上の開発費が必要と言われています。それらのうちテストが占める割合は不明ですが仮に3割として，その20%といえば，その費用的効果は実感して頂けるのではないでしょうか。</p>

<h2 id="section-2">ソースコード行数</h2>

<p>MWE2 がテスト工数の削減に繋がり得ることは示しました。
しかし，ソースコードの冗長性はどうでしょうか。
定性的に，フレームワークを採用すると，その流儀に合わせるためのコードが増え，ソースコードの量が増える傾向にあります。</p>

<p>LOC 実測値(コメントや空白行を除いたソースコード行数)を示します。</p>

<p>Lines Of Code</p>

<table>
  <thead>
    <tr>
      <th>artifact-id</th>
      <th>Pure Java</th>
      <th>MWE2</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>jp.ac….app</td>
      <td>660</td>
      <td>508</td>
    </tr>
    <tr>
      <td>jp.ac….codegen</td>
      <td>467</td>
      <td>461</td>
    </tr>
    <tr>
      <td>jp.ac….validation</td>
      <td>323</td>
      <td>553</td>
    </tr>
  </tbody>
</table>

<p>validation で行数が増えているのは，フレームワーク採用による弊害です。
この行数増加は抑制することも可能ですが，MWE2 スクリプトの作者のスキルレベル次第では，抑制し過ぎると使い勝手が悪くなるというトレードオフも存在します。</p>

<p>validation 以外の2つのバンドルに関しては，フレームワーク採用の割に，むしろ減っています。
MWE2 がワークフロー処理を肩代わりしたことによって，この現象は説明付けられます。</p>

<h2 id="section-3">まとめ</h2>

<p>ワークフローエンジンを採用した場合の保守性について，具体例を基に概説いたしました。
また，コード行数の増減についても軽く触れました。</p>

<p>モデルワークフローをともなうプロセスにおいて，ツールを Pure Java で作成するか MWE2 のようなワークフローエンジンを採用するかは，そのモデルやプロセスの規模感に大きく依存します。
AUTOSAR のような大規模なモデル仕様ならば MWE2 の採用を強くお勧めします。しかし，アジャイル・プロトタイピングのように初期の小規模な取り組みであれば，Pure Java を選択する余地はあるのかもしれません。</p>

<h2 id="section-4">広告</h2>

<p>MWE2 は，モデルワークフローの構築に大きなメリットをもたらしますが，MWE2 単体をインストールしただけではシステム構築は困難で，Eclipse プラグイン開発，EMF/ecore，Xtend/Xtext 等々の幅広い知識が必要となります。(いったんシステムが構築されてしまえば，利用者には深い知識は不要です)</p>

<p>合同会社もなみ屋では，Eclipse に関する10年の知見を，モデリングワークフローを構築しようとしている団体/企業に提供しています。ご興味をお持ちの方は，<a href="&#109;&#097;&#105;&#108;&#116;&#111;:&#115;&#117;&#112;&#112;&#111;&#114;&#116;&#064;&#109;&#111;&#110;&#097;&#109;&#105;&#045;&#121;&#097;&#046;&#099;&#111;&#109;">弊社サポート窓口</a> まで電子メールにてお問い合わせください。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Pure Java でのモデリングワークフローエンジン実装における諸課題と MWE2 を用いた解決]]></title>
    <link href="http://www.monami-ya.jp/blog/2016/10/31/the-reason-why-you-should-use-workflow-engine-instead-of-java/"/>
    <updated>2016-10-31T08:22:51+09:00</updated>
    <id>http://www.monami-ya.jp/blog/2016/10/31/the-reason-why-you-should-use-workflow-engine-instead-of-java</id>
    <content type="html"><![CDATA[<h1 id="abstract">Abstract</h1>

<p>ソフトウェア開発の分野でモデルベース設計が広く用いられるに従って，上流の概念設計だけでなく，中流のソースコードや下流のテストコードまでを自動生成することが一般的になってきました。</p>

<p>このような開発プロセス全体にモデルが影響する場合には，上流から下流までの各段階でモデル変換を行いながら，詳細化，ならびにソースコード等成果物の出力を行います。
このようなモデルを軸とする開発の流れはモデリングワークフローと呼ばれます。
このようなモデル変換のフローを制御するソフトウェアはワークフローエンジンと呼ばれます。</p>

<p>従来，ワークフローエンジンは，Java や Ruby など汎用のプログラミング言語を用いて記述されてきました。
しかしながら，汎用プログラミング言語では，その記述の自由度が裏目に出てしまい，再利用性や記述の容易性が損なわれてしまいます。</p>

<p>そこで，大規模なモデルワークフローにおいては，独自の言語(DSL - Domain Specific Language)を定義し，再利用性や記述の容易性を担保しようという取組みが進められています。</p>

<p>本稿では，大規模なモデルワークフローを前提としている仕様である AUTOSAR を題材に，そのモデルワークフローエンジンを Pure Java で記述している実装例を分析し，課題を抽出します。
また，モデルワークフロー記述のための MWE2 言語を用いることで，課題が適切に解決されうることを示します。</p>

<h2 id="section">前提</h2>

<h3 id="autosar-">AUTOSAR の特徴</h3>

<p>AUTOSAR は，欧州の自動車関連企業が中心となって仕様策定を進めている，車載ソフトウェアのための標準仕様です。AUTOSARは，下記のような特徴を持っています。</p>

<ul>
  <li>(補助的な外部モデルは存在するものの，概ね) 単一のメタモデルにより成立します。</li>
  <li>OEM の設計から始まる V 字開発フローの大半が，メタモデルの中でモデル変換のワークフローとして形式化できます。</li>
</ul>

<h3 id="section-1">モデリングワークフロー構築時の留意点</h3>

<p>モデリングワークフローは，開発プロセスの全体を串刺しするように用いられます。
開発プロセスの各段階で，特定の箇所が別の箇所の開発進捗を阻害するようなことがあると，プロセス全体が停滞するダウンリスクがあります。
そこで，ワークフローエンジンは，下記のような点に注意しなければなりません。</p>

<p>留意点A) ワークフローのコピーは，可能な限り減らすべきです。あるワークフローが変更された時の，他のワークフローへの影響分析コストが上昇します。</p>

<p>留意点B) ワークフローは分岐を可能な限り減らすべきです。分岐の多さ，すなわち高い循環的複雑度はテストケースの増大を招きます。</p>

<p>留意点C) ワークフローの各ワークノードが参照するリソースのスコープは，適切に設定されるべきです。ワークノード間の参照透明性が低いと，ワークフロー変更時の影響分析コストが上昇します。</p>

<p>留意点D) ワークフローエンジン，エンジンが処理するワークフローの実装，含まれるワークノードの実装は，それぞれ独立であるべきです。これらを分割統治することで，並列開発が可能となり，開発の規模に応じて開発者数をスケールさせることが可能となります。</p>

<h2 id="pure-java-">Pure Java 実装例の分析</h2>

<p>Pure Java での AUTOSAR 対応のモデリングワークフローエンジンの例示として，本稿では A-RTEGEN を用いることとします。</p>

<p>A-RTEGEN は<a href="https://www.nces.is.nagoya-u.ac.jp/">名古屋大学大学院情報科学研究科付属 組込みシステム研究センター(NCES)</a>が中心となって開発しており，ソースコードが公開されています。</p>

<p>A-RTEGEN の内部構造のうち，モデルワークフローを管理している部分のみを抽出すると，概ね図の通りになります。</p>

<p><img src="http://www.monami-ya.jp/images/2016-10-30-the-reason-why-you-should-use-workflow-engine-instead-of-java-1.png" /></p>

<p>GENERATE, CONTRACT 各フェーズの具体的なソースコードは <a href="https://github.com/PizzaFactory/a_rtegen/blob/1.3.0/src/jp.ac.nagoya_u.is.nces.a_rte.app/src/jp/ac/nagoya_u/is/nces/a_rte/app/internal/GeneratePhaseRteGenerator.java">https://github.com/PizzaFactory/a_rtegen/blob/1.3.0/src/jp.ac.nagoya_u.is.nces.a_rte.app/src/jp/ac/nagoya_u/is/nces/a_rte/app/internal/GeneratePhaseRteGenerator.java</a> および <a href="https://github.com/PizzaFactory/a_rtegen/blob/1.3.0/src/jp.ac.nagoya_u.is.nces.a_rte.app/src/jp/ac/nagoya_u/is/nces/a_rte/app/internal/ContractPhaseRteGenerator.java">https://github.com/PizzaFactory/a_rtegen/blob/1.3.0/src/jp.ac.nagoya_u.is.nces.a_rte.app/src/jp/ac/nagoya_u/is/nces/a_rte/app/internal/ContractPhaseRteGenerator.java
</a>
にあります。</p>

<p>これらのコードは，先に一般論で挙げた留意点をことごとく満たしません。</p>

<h3 id="a">留意点Aについて</h3>

<p>まず，留意点A について，ソースコードの目視，また上掲の図を見ても理解可能なように CONTRACT / GENERATE の多くの箇所でソースクローンが存在しており満たせません。
クローン部分のみのテストが不可能な状態で，信頼性の担保が難しい状態になっています。</p>

<h3 id="b">留意点Bについて</h3>

<p>留意点B については，return 文による分岐，例外脱出による分岐，if 文による分岐が混合しており，また関数呼び出しのネストも存在します。
これらは Java 言語での記述としては自然です。しかし，ワークフローを Java で記述するという最上流の判断が間違えているといえます。</p>

<h3 id="c">留意点Cについて</h3>

<p>留意点C については，ソースコードのコンストラクタをご覧いただくと，満たせていないことが解ります。
使用するほぼすべてのオブジェクトがコンストラクタで生成されており，クラス内の処理から参照/変更が可能となっています。
車載ソフトウェアでもグローバル変数の使用は問題視されますが，同様の問題が，このコードには存在しています。</p>

<p>なお，使用するオブジェクトをコンストラクタで用意するのは，Java 言語での設計戦略としては悪くはありません。依存性注入のテクニックとしてコンストラクタインジェクションという技法があり，Java 言語の世界，特にエンタープライズ分野では広く使われています。
留意点Cを満たせない理由は，Java の単一クラスでワークフローを記述しようとした最上流の設計の失敗といえます。</p>

<h3 id="d">留意点Dについて</h3>

<p>留意点D については，A-RTEGEN が単一のアプリケーションとして提供されていることから，明らかに満たしていません。</p>

<h2 id="mwe2-">MWE2 にすると何が変わるのか?</h2>

<p>MWE2 は，最も狭義には，ワークフローエンジンです。広めに捉えると，ワークフローエンジンへの入力となる言語と，各ワークノードを実装するための API のセットと言えます。</p>

<p>A-RTEGEN の CONTRACT フェーズと等価な MWE2 言語記述は，下記のようになります。(イメージです。この記述は厳密には正しくなく，MWE2 は処理できません)</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
<span class="line-number">46</span>
<span class="line-number">47</span>
<span class="line-number">48</span>
<span class="line-number">49</span>
<span class="line-number">50</span>
<span class="line-number">51</span>
<span class="line-number">52</span>
<span class="line-number">53</span>
<span class="line-number">54</span>
</pre></td><td class="code"><pre><code class=""><span class="line">var diagnostics = BasicDiagnostic {}
</span><span class="line">var loader = AutosarModelLoader {}
</span><span class="line">var GeneratorInitOptions initOptions 
</span><span class="line">
</span><span class="line">/** 
</span><span class="line"> * CONTRACTフェーズ向けのRTEを生成する。
</span><span class="line"> */
</span><span class="line">Workflow {
</span><span class="line">	component = SystemOutPrintln {
</span><span class="line">		message = "Checking input AUTOSAR XMLs..."
</span><span class="line">	}
</span><span class="line">	component = InitResource {}
</span><span class="line">	component = LoadM2 {
</span><span class="line">		loader = loader
</span><span class="line">	}
</span><span class="line">	component = ValidateM2 {
</span><span class="line">		rteValidatorM2 = ModelValidator.forRteContractPhaseM2
</span><span class="line">		bswmValidatorM2 = ModelValidator.forBswmContractPhaseM2
</span><span class="line">		commonValidatorM2 = ModelValidator.forCommonContractPhaseM2
</span><span class="line">		diagnostics = diagnostics
</span><span class="line">	}
</span><span class="line">	component = LoadInstance {
</span><span class="line">		loader = loader
</span><span class="line">	}
</span><span class="line">	component = ValidateInstance {
</span><span class="line">		rteValidatorInstance = ModelValidator.forRteContractPhaseInstance
</span><span class="line">		bswmValidatorInstance = ModelValidator.forBswmContractPhaseInstance
</span><span class="line">		commonValidatorInstance = ModelValidator.forCommonContractPhaseInstance
</span><span class="line">		diagnostics = diagnostics
</span><span class="line">	}
</span><span class="line">	component = CheckDiagnostics {
</span><span class="line">		diagnostics = diagnostics
</span><span class="line">	}
</span><span class="line">	component = PrintPreBuildMessage {}
</span><span class="line">	component = BuildModuleModel {
</span><span class="line">		moduleModelBuilder = RteModuleModelBuilder {}
</span><span class="line">	}
</span><span class="line">	component = GenerateRte {
</span><span class="line">		codeGenerator = RteCodeGenerator {
</span><span class="line">			codeFormatter = UncrustifyCodeFormatter {
</span><span class="line">				executableFile = generatorInitOptions.uncrustifyExecutableFile
</span><span class="line">				configFile = generatorInitOptions.uncrustifyConfigFile
</span><span class="line">			}
</span><span class="line">		}
</span><span class="line">	}
</span><span class="line">	component = SystemOutPrintln {
</span><span class="line">		message = "Generation done." 
</span><span class="line">	}
</span><span class="line">	component = DumpModel {
</span><span class="line">		ignoreAbort = true
</span><span class="line">		modelFileName = "modeldump.xmi"
</span><span class="line">		serializer = ModelSerializer {}
</span><span class="line">	}
</span><span class="line">}</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>この記述には，component(ワークノード)の実行順序と，実行に際し必要となるオブジェクトの値設定が含まれます。</p>

<p><code>LoadInstance</code>, <code>ValidateInstance</code> 等は，ワークノードです。これらは MWE2 自身では提供されず，MWE2 が提供する API を基に，実装する必要があります。
たとえば，<code>LoadInstance</code> は下記のように記述されます。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
</pre></td><td class="code"><pre><code class=""><span class="line">package jp.ac.nagoya_u.is.nces.a_rte.app.internal.workflow.contract
</span><span class="line">
</span><span class="line">import org.eclipse.emf.mwe2.runtime.workflow.IWorkflowContext
</span><span class="line">import org.eclipse.xtend.lib.annotations.Accessors
</span><span class="line">import jp.ac.nagoya_u.is.nces.a_rte.persist.AutosarModelLoader
</span><span class="line">import jp.ac.nagoya_u.is.nces.a_rte.app.internal.workflow.ARteBuildAction
</span><span class="line">
</span><span class="line">/**
</span><span class="line"> * AUTOSAR Instanceモデルの読み込み
</span><span class="line"> */
</span><span class="line">class LoadInstance extends ARteBuildAction {
</span><span class="line">	@Accessors var AutosarModelLoader loader
</span><span class="line">
</span><span class="line">	override action(IWorkflowContext ctx) {
</span><span class="line">		this.loader.loadInstance(ctx.resource)
</span><span class="line">	}	
</span><span class="line">}</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>最終的には汎用言語で処理を記述する必要はありますが，処理の粒度を細かくすることで再利用性が高まります。
またワークフローの作成者とワークノードの作成者が分離することで，<code>留意点D</code>が解決されます。</p>

<p>MWE2 のソースコードに戻ります。MWE2 スクリプトの初めに幾つかの大域変数が定義されていますが，これらは component から直接に参照することはできず，中括弧内で代入されることでのみ可視になります。
つまり<code>留意点C</code>が解決されています。</p>

<p>MWE2 スクリプトには，例外脱出の処理記述がありません。これではエラー中断ができないように思われるかもしれません。
この問題は component に一枚の薄皮を被せることで解決可能です。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
</pre></td><td class="code"><pre><code class=""><span class="line">abstract class AutosarBuildAction implements IWorkflowComponent {
</span><span class="line">	static val ABORT_RETURN = "a-rtegen.abortReturn"
</span><span class="line">	@Accessors var boolean ignoreAbort = false
</span><span class="line"> 
</span><span class="line">	/**
</span><span class="line">	 * Use `action` method instead of this.
</span><span class="line">	 */
</span><span class="line">	override final invoke(IWorkflowContext ctx) {
</span><span class="line">		if (ctx.get(ABORT_RETURN) == null || ignoreAbort) {
</span><span class="line">			action(ctx)
</span><span class="line">		}
</span><span class="line">	}</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>ワークノード中で例外が発生した場合，以降のすべてのワークノードは実行されない状態にし，かつエラー処理を行いたい場合は MWE2 ファイルに <code>ignoreAbort=true</code> と明示することで，強制的にワークノード内処理を行うようにします。
分岐のないワークフローであればこれで十分です。<code>留意点 B</code> が解決されます。</p>

<p>残るは <code>留意点 A</code> についてです。
MWE2 を採用しても，CONTRACT / GENERATE それぞれのフェーズは，似てはいますが微妙に違います。つまり，似通っている 2つの mwe2 ファイルが必要になります。これは AUTOSAR 仕様に依存する事柄なのですが，同様のことは他のモデリングワークフローでも起こり得ることです。
ここは MWE2 のみを採用している範囲では解決できません。解決の方法は2通りありえます。</p>

<ul>
  <li>MWE2 に制御構文に相当する機能を付加する Viatra というツールを，Eclipse プロジェクトからダウンロードします。</li>
  <li>CONTRACT / GENERAGE の両方の情報を内包するモデルから MWE2 を生成するようにします。</li>
</ul>

<p>どちらかができたならば，<code>留意点 A</code> も解決します。</p>

<p>もし読者が最新版の AUTOSAR 仕様の愛読者であったならば，後者の方法でこの問題を解決する方法が暗に仕様記述されていることに気づくでしょう。</p>

<p>ここまでで，留意点AからDまですべての課題が解決されました。</p>

<h2 id="section-2">まとめ</h2>

<p>近年開発プロセスに浸透してきているモデリングワークフローを支えるツールを作成する際に，Pure Java で作成する場合の課題を実例を基に紹介し，ワークフロー記述用の DSL である MWE2 を用いることで課題を解消できることを紹介いたしました。</p>

<p>A-RTEGEN の実装者各位の名誉のために申し添えますが，Java アプリケーションとしての A-RTEGEN の品質は悪くはありません。目視によるレビューや静的解析ツールの結果も，それを裏付けています。
しかしながら，「Pure Java アプリケーションとしてワークフローを実装する」という最上流の方針決定に失敗しているとは言えます。
これは他の言語(Ruby を使った言語内 DSL など)を選んだとしても，汎用言語である限り同じ結果になりがちです。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[R-INコンソーシアムに参加いたしました．]]></title>
    <link href="http://www.monami-ya.jp/blog/2015/04/01/joined-to-r-in/"/>
    <updated>2015-04-01T00:00:00+09:00</updated>
    <id>http://www.monami-ya.jp/blog/2015/04/01/joined-to-r-in</id>
    <content type="html"><![CDATA[<p>合同会社もなみ屋は，ルネサスエレクトロニクス(株)が提供するR-INマイコンを軸に，ワールドワイドのインダストリー(産業界)を効率化、高付加価値化及び活性化を行うことを目的とする「R-INコンソーシアム」に参加いたしました．
オープンソースを軸としたコンパイラ・デバッガ・RTOS・IDEといったソリューションを基盤に，mruby を始めとする次世代の産業界 (IoT, Industory4.0) に影響を及ぼしうる技術を携えて，様々なソリューションを引き続き提案していく所存です．</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[本店所在地変更のお知らせ]]></title>
    <link href="http://www.monami-ya.jp/blog/2015/03/17/registration-of-relocation-of-head-office/"/>
    <updated>2015-03-17T12:50:37+09:00</updated>
    <id>http://www.monami-ya.jp/blog/2015/03/17/registration-of-relocation-of-head-office</id>
    <content type="html"><![CDATA[<p>合同会社もなみ屋は，定款にて定める本店所在地を「東京都新宿区」に変更し，関連登記を完了いたしました．</p>

<p>また，事務所を移転いたしました．新住所は以下のとおりです．代表電話番号に変更はございません．</p>

<ul>
  <li>〒160-0022 東京都新宿区新宿7丁目26-7 ビクセル新宿1F</li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PizzaFactory Tiny JTAG ご購入で、Amazonギフト券500円分を還元]]></title>
    <link href="http://www.monami-ya.jp/blog/2014/06/25/pf-jtag-with-ucb-bf512-campaign/"/>
    <updated>2014-06-25T17:46:24+09:00</updated>
    <id>http://www.monami-ya.jp/blog/2014/06/25/pf-jtag-with-ucb-bf512-campaign</id>
    <content type="html"><![CDATA[<p>弊社が開発を行い、技術者向けサポートを提供している、 monami-ya.mrb のターゲットボードに、<a href="http://www.kaneko-sys.co.jp/shop/00016.html">金子システム製 Blackfin ボード UCB-BF512</a> が加わりました。
これを記念して、UCB-BF512 での開発効率を高める、PizzaFactory Tiny JTAG for Blackfin/SHARC をご購入頂いたお客様のうち、下記の手順を沿ってご応募頂いた方に、Amazonギフト券500円分を還元いたします。</p>

<p>この機会に、PizzaFactory Tiny JTAG for Blackfin/SHARC の導入を、是非ご検討ください。</p>

<h2 id="section">応募方法</h2>

<p>下記の手順でご応募ください。</p>

<ul>
  <li>Amazon.co.jp で <a href="http://www.amazon.co.jp/o/ASIN/B003MG4BH2/monamiya-22">PizzaFactory Tiny JTAG for Blackfin/SHARC</a> をご購入ください。</li>
  <li><a href="http://www.kaneko-sys.co.jp/shop/00016.html">金子システム製 Blackfin ボード UCB-BF512</a> と、ご購入頂いた PizzaFactory Tiny JTAG for Blackfin/SHARC とが一緒に写っている画像ファイルをご用意ください。</li>
  <li>上記画像ファイルと、Amazon.co.jp でのご購入日時を添えて、電子メールにて support@monami-ya.com までメールをご送信ください。</li>
</ul>

<h2 id="section-1">締切</h2>

<p>7月20日までのご購入分が対象となります。</p>

<h2 id="section-2">ギフト券の発送方法と日時</h2>

<p>500円分のギフト券は、Eメールタイプで、ご応募頂いたメールアドレスに、8月中旬頃ににお届けします。</p>

<p>なお、ご申告頂いたご購入日時に相当する出荷が Amazon.co.jp の記録に存在しない場合、また1台のPizzaFactory Tiny JTAG for Blackfin/SHARC に対する複数の応募と認められる場合には、ギフト券発送の前に、ご質問のメールを差し上げることがあります。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[TOPPERS/JSP と monami-ya.mrb のオープンソースサポートサービスが、統合されました。]]></title>
    <link href="http://www.monami-ya.jp/blog/2014/06/21/opensource-support-for-monami-ya-dot-mrb-is-integrated-to-toppers-jsp-support/"/>
    <updated>2014-06-21T12:00:00+09:00</updated>
    <id>http://www.monami-ya.jp/blog/2014/06/21/opensource-support-for-monami-ya-dot-mrb-is-integrated-to-toppers-jsp-support</id>
    <content type="html"><![CDATA[<h2 id="section">概要</h2>
<p>2014年6月21日以降、monami-ya.mrb は、TOPPERS/JSP カーネルの拡張コンポーネントとしてサポートされます。
詳細につきましては、TOPPERS/JSP カーネルの<a href="http://www.monami-ya.jp/service/toppers-jsp/">オープンソースサポートサービス</a> のページをご参照ください。</p>

<p>2014年6月20日以前に monami-ya.mrb のオープンソースサポートサービスを締結された方は、自動的に TOPPERS/JSP カーネルのオープンソースサポートサービスが追加されます。</p>

<h2 id="sla-">適用される SLA の詳細</h2>

<p>今回のサービス統合により、monami-ya.mrb のオープンソースサポートサービスのサービスレベルアグリーメント(SLA)は、[TOPPERS/JSP に対するもの]と同一となります。</p>

<h2 id="section-1">今回の統合によるお客様へのメリット</h2>

<p>この統合により、monami-ya.mrb の導入をご検討なさっている開発者の方々は、static thread binding の機能に対する技術サポートをより低コストで享受することができます。</p>

<p>また、従来から TOPPERS/JSP カーネルのオープンソースサポートサービスをご利用の開発者の方々は、より先進的な開発環境である monami-ya.mrb の技術サポートを、追加の費用を弊社にお支払い戴くことなく、受けることができます。</p>

<h2 id="section-2">導入ご検討中の皆様への追加情報</h2>

<p>TOPPERS/JSP カーネルのオープンソースサポートサービスの開始に必要な『オープンソースサポートサービス・スタートパック(TOPPERS/JSP)』は、弊社直販のほか、<a href="http://www.amazon.co.jp/o/ASIN/B00JO70KL4/monamiya-22">Amazon.co.jp</a>から購入可能です。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[monami-ya.mrb の製品情報を更新いたしました。]]></title>
    <link href="http://www.monami-ya.jp/blog/2014/06/18/update-information-for-monami-ya-dot-mrb/"/>
    <updated>2014-06-18T11:48:01+09:00</updated>
    <id>http://www.monami-ya.jp/blog/2014/06/18/update-information-for-monami-ya-dot-mrb</id>
    <content type="html"><![CDATA[<p><a href="http://www.monami-ya.jp/product/monami-ya.mrb/about/index.html">monami-ya.mrb の製品情報</a>を更新いたしました。
この度の更新により、monami-ya.mrb のソースツリーはオープンソース版のみとなりました。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Movsign Map Redirect をβ版公開いたしました。]]></title>
    <link href="http://www.monami-ya.jp/blog/2014/05/24/movsign-map-redirect-beta/"/>
    <updated>2014-05-24T13:28:22+09:00</updated>
    <id>http://www.monami-ya.jp/blog/2014/05/24/movsign-map-redirect-beta</id>
    <content type="html"><![CDATA[<p>合同会社もなみ屋は、地図リンクに特化した短縮URLサービス「Movsign Map Redirect」をβリリースいたしました。
正式リリースまで、機能制限なくお使いいただけます。</p>

<p>Movsign Map Redirect は、登録ユーザが望む緯度・経度情報と一意に対応する短縮URLを発行し保持する機能を提供します。
発行された短縮URLは、非登録ユーザでも参照が可能であり，またそのURLの参照を Google Analytics により解析させることが可能です。</p>

<p>Movsign Map Redirect を活用することにより、印刷物(QRコード等)やNFCタグといった offline デバイスから，スマートフォンなどで参照できる online 地図サービスへの導線を確保し，また，その効果を測定することが可能となります。</p>

<h2 id="section">応用例</h2>

<p>地域観光を紹介するコンテンツの電子化は進んでおりますが、バッテリー容量の制約などから，いまだに印刷物への需要も根強いものがあります。</p>

<p>合同会社もなみ屋は、観光とITとの融合を試みている自治体等に対して，本ソリューションを広く提供していく予定です。</p>

<p>Webサイト: http://mapr.movsign.info/</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Amazonから購入可能になりました。]]></title>
    <link href="http://www.monami-ya.jp/blog/2014/04/14/support-packs-on-amazon/"/>
    <updated>2014-04-14T15:45:54+09:00</updated>
    <id>http://www.monami-ya.jp/blog/2014/04/14/support-packs-on-amazon</id>
    <content type="html"><![CDATA[<p>「オープンソース・ソフトウェア サポート・サービス」のライセンスコードが、Amazonから購入可能になりました。
本日時点で下記のソフトウェアが対象となります。</p>

<ul>
  <li><a href="http://www.amazon.co.jp/o/ASIN/B00JO70KL4/monamiya-22">TOPPERS/JSP</a></li>
  <li>[TOPPERS/FI4)(http://www.amazon.co.jp/o/ASIN/B00JO76DBU/monamiya-22)</li>
  <li>[TOPPERS/HRP)(http://www.amazon.co.jp/o/ASIN/B00JO780HA/monamiya-22)</li>
  <li><a href="http://www.amazon.co.jp/o/ASIN/B00JO791SM/monamiya-22">FatFsPro</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[OSSSSガイドブックがGoogle Booksに登録されました。]]></title>
    <link href="http://www.monami-ya.jp/blog/2014/04/04/ossss-guidebook-avaliable-on-google-books/"/>
    <updated>2014-04-04T08:25:36+09:00</updated>
    <id>http://www.monami-ya.jp/blog/2014/04/04/ossss-guidebook-avaliable-on-google-books</id>
    <content type="html"><![CDATA[<p>弊社オープンソースサポートサービスへの登録方法は活用方法を記した OSSSSガイドブックが<a href="http://books.google.co.jp/books?id=xCc-AwAAQBAJ">Google Booksに登録されました</a>。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[代表電話番号が変更になりました。]]></title>
    <link href="http://www.monami-ya.jp/blog/2014/04/03/phone-number-changed/"/>
    <updated>2014-04-03T15:17:07+09:00</updated>
    <id>http://www.monami-ya.jp/blog/2014/04/03/phone-number-changed</id>
    <content type="html"><![CDATA[<p>弊社の代表電話番号が変更になりました。</p>

<ul>
  <li>旧番号 : 03-4550-0313</li>
  <li>新番号 : 03-4588-8718</li>
</ul>

<p>なお FAX は廃止いたしました。
図版が必要なご連絡につきましては電子メールにてお願い致します。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[オープンソースサポートサービスのガイドブックを作成いたしました。]]></title>
    <link href="http://www.monami-ya.jp/blog/2014/04/03/ossss-guidebook-released/"/>
    <updated>2014-04-03T14:28:22+09:00</updated>
    <id>http://www.monami-ya.jp/blog/2014/04/03/ossss-guidebook-released</id>
    <content type="html"><![CDATA[<p>弊社(合同会社もなみ屋)が提供しているオープンソースサポートサービス(OSSSS)の利用法について解説したガイドブック「OSSSSガイドブック」を電子書籍として作成いたしました。</p>

<p>ガイドブックは、下記サイトから無償でダウンロード可能です。</p>

<p>http://support.monami-ya.com/oss-support-guidebook/downloads</p>

<p>再配布条件は、Creative Commons (CC BY-ND)としておりますので，改変しなければ自由に再配布して頂けます。</p>

<p>初版の目次は下記のとおりです。</p>

<blockquote>
  <p>第 1 章 はじめに
第 2 章 ヘルプデスクへのオンラインサインアップ
第 3 章 弊社への OSSSS ライセンスコードの通知
第 4 章 チケットの発行
第 5 章 オープンソース・ソフトウェア サポートサービス約款</p>
</blockquote>

<p>是非ご一読頂き、弊社提供のオープンソースサポートサービスの導入をご検討ください。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[教育用途限定:お試しモニタ募集] RaspberryPi対応GPIO変換基板キット]]></title>
    <link href="http://www.monami-ya.jp/blog/2014/03/31/try-rpi-gpio/"/>
    <updated>2014-03-31T14:35:00+09:00</updated>
    <id>http://www.monami-ya.jp/blog/2014/03/31/try-rpi-gpio</id>
    <content type="html"><![CDATA[<p>新学期となり、RaspberryPiを使った授業，クラブ活動，勉強会などの企画をなさる教育者の方々も多いかと思います。</p>

<p>合同会社もなみ屋では、そのような教育者の方々の教材作成をお手伝いをいたしたく，弊社製品「RaspberryPi対応GPIO変換基板キット」を数量限定でプレゼントいたします。
下記条件を満たす方で、弊社製品にご興味をお持ちの方は，ぜひご応募ください。</p>

<h2 id="section">プレゼントの内容と当選人数</h2>

<ul>
  <li><a href="http://www.amazon.co.jp/o/ASIN/B00GN3YQK8/monamiya-22">Raspberry Pi対応GPIO変換基板キット (ケーブル無し)</a>  1セット</li>
  <li><a href="http://www.amazon.co.jp/o/ASIN/B00F1MLOAW/monamiya-22">Raspberry Pi対応GPIOリボンケーブル(2x13)</a> 1セット</li>
</ul>

<p>各1セットずつ。5名．</p>

<p>ただし、「RaspberryPi対応GPIO変換基板キット (ケーブル無し)」は，アウトレット品となります。
(アウトレット品は、基板等に小キズ等が認められたものです。審美上の理由で正規品としておりませんが，機能上の不都合はございません．)</p>

<p>プレゼントの送料は、弊社が負担いたします。</p>

<h2 id="section-1">応募条件</h2>

<p>下記条件の全てを満たすことが必要です。</p>

<ul>
  <li>弊社からプレゼントをお届け可能な、日本の住所をお持ちの方(職場でも結構です)</li>
  <li>プレゼントを用いた授業、クラブ活動，勉強会などの教材を作成検討中の教育者の方
  教員免許の有無等の資格は問いません。教育機関でなくても、職場や業界の勉強会でも結構です．
  今回は、教育目的に限ります。開発用途でのご応募はご遠慮ください．</li>
  <li>当選の際には、プレゼントお届け後 3ヶ月を目安に，400字程度の感想とプレゼントの活用に関する写真1枚をお寄せ頂き，弊社webページでの公開に同意頂ける方
  公開の際、お名前やご所属については実名・匿名・ペンネームのいずれでも結構です。</li>
</ul>

<h2 id="section-2">応募の方法と期間</h2>

<p>Googleドライブを用いた<a href="https://docs.google.com/a/monaka.org/forms/d/17k-JHDgEvwx8G602mtWDrQI7hAsaVEx1JGDnVDyr1vw/">応募フォームをご用意</a>いたしました。
4月20日00:00(日本時間)締切といたします。</p>

<h2 id="section-3">選考と結果の発表</h2>

<p>応募者多数の場合には、抽選と致します。</p>

<p>結果の発表は、応募フォームにご記入頂いたメールアドレス宛のEメールにてお知らせいたします。</p>

]]></content>
  </entry>
  
</feed>
